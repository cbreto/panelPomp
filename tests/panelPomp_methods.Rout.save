
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## test codes in R/panelPomp_methods.R
> 
> library(panelPomp,quietly=TRUE)
Welcome to pomp!
As of version 2.7.1.0, important changes have been made to the
default settings of the particle filtering algorithms in
‘pfilter’, ‘mif2’, ‘pmcmc’, ‘bsmc2’.
These changes are not backward compatible.
See the package NEWS for the details.

For information on upgrading your pomp version < 2 code, see the
“pomp version 2 upgrade guide” at https://kingaa.github.io/pomp/.

> 
> TESTS_PASS <- NULL
> test <- function(expr1,expr2,all="TESTS_PASS",env=parent.frame(),...) 
+   panelPomp:::test(expr1,expr2,all=all,env=env,...)
> 
> ppo <- panelPomp:::pompExample(prw,envir=NULL)[[1]]
> pP2 <- list(shared=c(sigmaX=1,sigmaY=2),
+             specific=matrix(c(0,0.1),nr=1,
+                             dimnames=list(param="X.0",unit=c("rw1","rw2"))))
> ppo <- panelPomp(unitobjects(ppo),shared=pP2$shared,specific=pP2$specific)
> # other definitions from old test file
> pg <- panelPompExample(pangomp)
> pgl <- as(pg,"list")
> g <- pgl[[1]]; coef(g) <- c(pparams(pg)$sh, pparams(pg)$sp[,1])
> pp <- panelPomp(list(g,g),shared=pg@shared,
+                 specific=pg@specific[,1:2])
> 
> 
> 
> ## coef,panelPomp-method
> test(coef(ppo),
+      setNames(c(1,2,0,0.1),c("sigmaX","sigmaY","X.0[rw1]","X.0[rw2]")))
[1] TRUE
> 
> 
> 
> ## coef<-,panelPomp-method
> test(coef(ppo),{coef(ppo) <- 2*coef(ppo);coef(ppo) <- coef(ppo)/2;coef(ppo)})
[1] TRUE
> test(coef(ppo),
+      {coef(ppo) <- as.list(
+        setNames(c(1,2,0,0.1),c("sigmaX","sigmaY","X.0[rw1]","X.0[rw2]")))
+      coef(ppo)})
[1] TRUE
> wQuotes("Error : in ''coef<-'': part of ''value'' is not part of ",
+                "''coef(object)''.\n") -> err
> test(coef(ppo) <- c(ppo@shared,xsh=5),err)
[1] TRUE
> test(coef(ppo) <- c(coef(ppo),xsh=5),err)
[1] TRUE
> test({coef(ppo) <- setNames(
+   c(coef(ppo),5,6),c(names(coef(ppo)),
+                      sprintf("xsp[rw1]"),sprintf("xsp[rw2]")))},err)
[1] TRUE
> test({coef(ppo) <- setNames(
+   c(coef(ppo),5,6,7),c(names(coef(ppo)),
+                        sprintf("xsp[rw1]"),sprintf("xsp[rw2]"),"xsh"))},err)
[1] TRUE
> test({coef(ppo) <- setNames(
+   c(coef(ppo)[-c(1:2)],5,6),c(names(coef(ppo)[-c(1:2)]),
+                               sprintf("xsp[rw1]"),sprintf("xsp[rw2]")))},err)
[1] TRUE
> wQuotes("Error : in ''coef<-'': part of ''coef(object)'' is not specified ",
+                "in ''value''.\n") -> err
> test(coef(ppo) <- coef(ppo)[-c(1:2)],err)
[1] TRUE
> test(coef(ppo) <- ppo@shared,err)
[1] TRUE
> ## test length,panelPomp-method
> test(length(ppo),2L)
[1] TRUE
> ## test names,panelPomp-method
> test(names(ppo),c("rw1","rw2"))
[1] TRUE
> ## test pparams,panelPomp-method
> test(pparams(ppo),list(shared=ppo@shared,specific=ppo@specific))
[1] TRUE
> ## test pParams function
> ## all sh
> test(pParams(coef(ppo)[grep("^.+\\[.+?\\]$",names(coef(ppo)),perl=TRUE,
+                             value=TRUE,invert=TRUE)]),
+      list(shared=ppo@shared,specific=array(numeric(0),dim=c(0,0))))
[1] TRUE
> ## all sp
> test(list(shared=numeric(0),specific=ppo@specific),
+      pParams(coef(ppo)[grep("^.+\\[.+?\\]$",names(coef(ppo)),perl=TRUE,
+                             value=TRUE)]))
[1] TRUE
> ## both sh & sp
> test(pParams(coef(ppo)),list(shared=ppo@shared,specific=ppo@specific))
[1] TRUE
> ## test unitobjects,panelPomp-method
> test(unitobjects(ppo),ppo@unit.objects)
[1] TRUE
> coef(ppo[["rw1"]])
sigmaX sigmaY    X.0 
     1      2      0 
> ## test print function (tested in 'print-results.Rout.save')
> ## test show function (tested in 'print-results.Rout.save')
> ## test window,panelPomp-method
> test(length(ppo[1])==1L)
[1] TRUE
> test(setNames(c(1,2,0),c("sigmaX","sigmaY",sprintf("X.0[rw1]"))),
+      coef(ppo[1]))
[1] TRUE
> test(lapply(as(window(ppo,start=2),"list"),time),list(rw1=c(2,3,4),rw2=c(2,3,4)))
[1] TRUE
> test(lapply(as(window(ppo,end=2),"list"),time),list(rw1=c(1,2),rw2=c(1,2)))
[1] TRUE
> test(length(window(ppo[1:2],start=1,end=2)),2L) 
[1] TRUE
> test(lapply(as(window(ppo[1],start=1,end=2),"list"),time),list(rw1=c(1,2)))
[1] TRUE
> 
> 
> 
> ## as(,'list') returns list of units
> test(as(pg,"list"),pg@unit.objects)
[1] TRUE
> test(dim(as(pg,"data.frame")),c(5000L,3L))
[1] TRUE
> test(names(as(pg,"data.frame")),c("t","Y","unit"))
[1] TRUE
> 
> ## show
> show(ppo)
<object of class ‘panelPomp’>
panel of 2 units 
parameter(s):
$shared
sigmaX sigmaY 
     1      2 

$specific
     unit
param rw1 rw2
  X.0   0 0.1

summary of first panel unit ("rw1"):
<object of class ‘pomp’>
> show(panelPomp(unitobjects(ppo)))
<object of class ‘panelPomp’>
panel of 2 units 
parameter(s) unspecified
summary of first panel unit ("rw1"):
<object of class ‘pomp’>
> 
> ## check whether all tests passed
> all(get(eval(formals(test))$all))
[1] TRUE
> if (!all(get(eval(formals(test))$all))) stop("Not all tests passed!")
> 
