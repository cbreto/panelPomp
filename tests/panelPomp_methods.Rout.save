
R version 3.5.0 (2018-04-23) -- "Joy in Playing"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(panelPomp,quietly=TRUE)
> 
> TESTS_PASS <- NULL
> test <- function(expr1,expr2,all="TESTS_PASS",env=parent.frame(),...) 
+   panelPomp:::test(expr1,expr2,all=all,env=env,...)
> 
> ppo <- pompExample(prw,envir=NULL)[[1]]
> pP2 <- list(shared=c(sigmaX=1,sigmaY=2),
+             specific=matrix(c(0,0.1),nr=1,
+                             dimnames=list(param="X.0",unit=c("rw1","rw2"))))
> ppo <- panelPomp(unitobjects(ppo),shared=pP2$shared,specific=pP2$specific)
> 
> # other definitions from old test file
> pg <- try(pompExample(pangomp,envir=NULL)[[1]])
> g <- pompExample(gompertz,envir=NULL)[[1]]
> pp <- panelPomp(list(g,g),shared=pg@shared,
+                 specific=pg@specific[,1:2])
> 
> 
> ## test coef,panelPomp-method
> test(coef(ppo),setNames(c(1,2,0,0.1),c("sigmaX","sigmaY",
+                                        sprintf("X.0[rw1]"),sprintf("X.0[rw2]"))))
[1] TRUE
> ## coef<-,panelPomp-method
> test(coef(ppo),{coef(ppo) <- coef(ppo);coef(ppo)})
[1] TRUE
> wQuotes("Error : in ''coef<-'': part of ''value'' is not part of ",
+                "''coef(object)''.\n") -> err
> test(coef(ppo) <- c(ppo@shared,xsh=5),err)
[1] TRUE
> test(coef(ppo) <- c(coef(ppo),xsh=5),err)
[1] TRUE
> test({coef(ppo) <- setNames(
+   c(coef(ppo),5,6),c(names(coef(ppo)),
+                      sprintf("xsp[rw1]"),sprintf("xsp[rw2]")))},err)
[1] TRUE
> test({coef(ppo) <- setNames(
+   c(coef(ppo),5,6,7),c(names(coef(ppo)),
+                        sprintf("xsp[rw1]"),sprintf("xsp[rw2]"),"xsh"))},err)
[1] TRUE
> test({coef(ppo) <- setNames(
+   c(coef(ppo)[-c(1:2)],5,6),c(names(coef(ppo)[-c(1:2)]),
+                               sprintf("xsp[rw1]"),sprintf("xsp[rw2]")))},err)
[1] TRUE
> wQuotes("Error : in ''coef<-'': part of ''coef(object)'' is not specified ",
+                "in ''value''.\n") -> err
> test(coef(ppo) <- coef(ppo)[-c(1:2)],err)
[1] TRUE
> test(coef(ppo) <- ppo@shared,err)
[1] TRUE
> ## test length,panelPomp-method
> test(length(ppo),2L)
[1] TRUE
> ## test names,panelPomp-method
> test(names(ppo),c("rw1","rw2"))
[1] TRUE
> ## test pparams,panelPomp-method
> test(pparams(ppo),list(shared=ppo@shared,specific=ppo@specific))
[1] TRUE
> ## test pParams function
> ## all sh
> test(pParams(coef(ppo)[grep("^.+\\[.+?\\]$",names(coef(ppo)),perl=TRUE,
+                             value=TRUE,invert=TRUE)]),
+      list(shared=ppo@shared,specific=array(numeric(0),dim=c(0,0))))
[1] TRUE
> ## all sp
> test(list(shared=numeric(0),specific=ppo@specific),
+      pParams(coef(ppo)[grep("^.+\\[.+?\\]$",names(coef(ppo)),perl=TRUE,
+                             value=TRUE)]))
[1] TRUE
> ## both sh & sp
> test(pParams(coef(ppo)),list(shared=ppo@shared,specific=ppo@specific))
[1] TRUE
> ## test unitobjects,panelPomp-method
> test(unitobjects(ppo),ppo@unit.objects)
[1] TRUE
> coef(ppo[["rw1"]])
sigmaX sigmaY    X.0 
     1      2      0 
> ## test window,panelPomp-method
> test(length(ppo[1])==1L)
[1] TRUE
> test(setNames(c(1,2,0),c("sigmaX","sigmaY",sprintf("X.0[rw1]"))),
+      coef(ppo[1]))
[1] TRUE
> test(lapply(as(window(ppo,start=2),"list"),time),list(rw1=c(2,3,4),rw2=c(2,3,4)))
[1] TRUE
> test(lapply(as(window(ppo,end=2),"list"),time),list(rw1=c(1,2),rw2=c(1,2)))
[1] TRUE
> test(length(window(ppo[1:2],start=1,end=2)),2L) 
[1] TRUE
> test(lapply(as(window(ppo[1],start=1,end=2),"list"),time),list(rw1=c(1,2)))
[1] TRUE
> 
> ## as(,'list') returns list of units
> test(as(pg,"list"),pg@unit.objects)
[1] TRUE
> 
> test(dim(as(pg,"data.frame")),c(5000L,3L))
[1] TRUE
> test(names(as(pg,"data.frame")),c("time","Y","unit"))
[1] TRUE
> 
> ## check whether all tests passed
> all(get(eval(formals(test))$all))
[1] TRUE
> if (!all(get(eval(formals(test))$all))) stop("Not all tests passed!")
> 
> 
